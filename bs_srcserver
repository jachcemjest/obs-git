#!/usr/bin/perl -w
#
# Copyright (c) 2006, 2007 Michael Schroeder, Novell Inc.
# Copyright (c) 2008 Adrian Schroeter, Novell Inc.
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License version 2 as
# published by the Free Software Foundation.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program (see the file COPYING); if not, write to the
# Free Software Foundation, Inc.,
# 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA
#
################################################################
#
# The Source Server
#

BEGIN {
  my ($wd) = $0 =~ m-(.*)/- ;
  $wd ||= '.';
  chdir($wd);
  unshift @INC,  "$wd/build";
  unshift @INC,  "$wd";
}

use XML::Structured ':bytes';
use Data::Dumper;
use Storable ();
use Symbol;

use BSConfig;
use BSRPC ':https';
use BSServer;
use BSUtil;
use BSFileDB;
use BSXML;
use BSVerify;
use BSHandoff;
use BSWatcher ':https';
use BSXPath;
use BSStdServer;
use BSSrcdiff;
use Build;
use BSHermes;

use BSXPath;
use BSXPathKeys;
use BSDB;
use BSDBIndex;

use strict;

my $port = 5352;	#'SR'
$port = $1 if $BSConfig::srcserver =~ /:(\d+)$/;

my $projectsdir = "$BSConfig::bsdir/projects";
my $eventdir = "$BSConfig::bsdir/events";
my $srcrep = "$BSConfig::bsdir/sources";
my $requestsdir = "$BSConfig::bsdir/requests";
my $rundir = $BSConfig::rundir || "$BSConfig::bsdir/run";

my $reqindexdb = "$BSConfig::bsdir/db/request";
my $extrepodb = "$BSConfig::bsdir/db/published";

my $remotecache = "$BSConfig::bsdir/remotecache";

my $srcrevlay = [qw{rev vrev srcmd5 version time user comment}];
my $eventlay = [qw{number time type project package repository arch}];

my $ajaxsocket = "$rundir/bs_srcserver.ajax";

my %packagequota;

##########################
#just as it should look like for using original backend
import(bs_srcserver_common)
import(bs_srcserver_common_notsure)
import(bs_srcserver_uploadonly)
import(bs_srcserver_bsdbonly_links)
import(bs_srcserver_bsdbonly)
##########################

###!!! obs-git: not used anywhere else
sub unify {
  my %h = map {$_ => 1} @_;
  return grep(delete($h{$_}), @_);
}

#########################################################################

# set up kiwi project callback
###!!! obs-git: this is not used anywhere in source repo
sub kiwibootcallback {
  my ($projid, $packid) = @_;
  BSVerify::verify_projid($projid);
  BSVerify::verify_packid($packid);
  my $rev = getrev($projid, $packid);
  die("$projid/$packid does not exist\n") unless $rev && $rev->{'srcmd5'} ne 'empty';
  my $files = lsrep($projid, $packid, $rev->{'srcmd5'});
  die("could not get file list\n") unless $files;
  my ($md5, $file) = findfile($projid, $packid, undef, 'kiwi', $files);
  die("no kiwi file found\n") unless $md5 && $file;
  my $xml = readstr("$srcrep/$packid/$md5-$file");
  return ($xml, {'project' => $projid, 'package' => $packid, 'srcmd5' => $rev->{'srcmd5'}, 'file' => $file});
}
$Build::Kiwi::bootcallback = \&kiwibootcallback;

##########################################################################

###!!! obs-git: because of this global variable I leave it here for now - otherwise into bs_srcserver_common_notsure
my %prp_to_repoinfo;

sub prp_to_repoinfo {
  my ($prp) = @_;

  my $repoinfo = $prp_to_repoinfo{$prp};
  if (!$repoinfo) {
    my $repoinfodb = BSDB::opendb($extrepodb, 'repoinfo');
    $repoinfo = $repoinfodb->fetch($prp);
    if ($repoinfo) {
      for (@{$repoinfo->{'prpsearchpath'} || []}) {
	next if ref($_);	# legacy
	my ($p, $r) = split('/', $_, 2);
	$_ = {'project' => $p, 'repository' => $r};
      }
    } else {
      $repoinfo = {'binaryorigins' => {}};
    }
    $prp_to_repoinfo{$prp} = $repoinfo;
  }
  return $repoinfo;
}

#############################################################################

sub hello {
  my ($cgi) = @_;
  return "<hello name=\"Source Repository Ajax Server\" />\n" if $BSStdServer::isajax;
  return "<hello name=\"Source Repository Server\" />\n";
}

####################################################################

my $dispatches = [
  '/' => \&hello, #common

  '!rw :' => undef,
  '!- GET:' => undef,
  '!- HEAD:' => undef,

  # /platform name space -> obsolete
  '/platform' => \&getprojectlist,
  '/platform/$project' => \&getrepositorylist,
  '/platform/$project/$repository' => \&getrepository, #common

  # /repository name space -> obsolete
  '/repository' => \&getprojectlist,
  '/repository/$project' => \&getrepositorylist,
  '/repository/$project/$repository' => \&getrepository,

  # /project name space -> obsolete
  '/project' => \&getprojectlist,
  '/project/$project' => \&getproject,
  'PUT:/project/$project' => \&putproject,

  # /package name space -> obsolete
  '/package' => \&getprojectlist,
  '/package/$project' => \&getpackagelist,
  '/package/$project/$package' => \&getpackage,
  'PUT:/package/$project/$package' => \&putpackage,
  'DELETE:/package/$project/$package' => \&delpackage,
  '/package/$project/$package/history rev?' => \&getpackagehistory,

  # /source name space: manage project and package data
  '/source' => \&getprojectlist, #common
  'POST:/source/$project cmd:' => \&projectcmd, #common and upload only
  '/source/$project' => \&getpackagelist, #common
  'DELETE:/source/$project' => \&delproject, #common - does not touch any sources
  '/source/$project/_meta' => \&getproject, #common
  'PUT:/source/$project/_meta' => \&putproject, #upload only
  '/source/$project/_pubkey' => \&getpubkey, #common
  'DELETE:/source/$project/_pubkey' => \&deletekey, #common
  '/source/$project/_config' => \&getprojectconfig, #common
  'PUT:/source/$project/_config' => \&putprojectconfig, #upload only

  'POST:/source/$project/$package cmd: rev? user:? comment:? orev:rev? oproject:project? opackage:package? expand:bool? keeplink:bool? repairlink:bool? linkrev? unified:bool?' => \&sourcecmd, #common main function, but subfunctions are bsdb dependant
  'PUT:/source/$project/$package cmd: rev? user:? comment:?' => \&sourcecommitfilelist, #bsdb only
  '/source/$project/$package:package_product rev? linkrev? emptylink:bool? expand:bool? view:? extension:? lastworking:bool?' => \&getfilelist, #bsdb only
  '/source/$project/$package:package_product/_history rev?' => \&getpackagehistory, #common
  '/source/$project/$package/_meta' => \&getpackage, #common
  'PUT:/source/$project/$package/_meta' => \&putpackage, #upload only
  'DELETE:/source/$project/$package' => \&delpackage, #common, but uses expandproduct function (bsdb only)
  '/source/$project/$package:package_pattern/$filename rev?' => \&getfile, #bsdb only, but probably only path variable need change in git
  'PUT:/source/$project/$package:package_pattern/$filename rev? user:? comment:? keeplink:bool?' => \&putfile, #bsdb only
  'DELETE:/source/$project/$package:package_pattern/$filename rev? user:? comment:? keeplink:bool?' => \&delfile, #bsdb only
  '/source/$project/$package:package_product/$filename rev?' => \&getfile, #before
  'PUT:/source/$project/$package:package_product/$filename rev? user:? comment:? keeplink:bool?' => \&putfile, #before
  'DELETE:/source/$project/$package:package_product/$filename rev? user:? comment:? keeplink:bool?' => \&delfile, #before

  # /published name spec: access published binaries
  '/published' => \&published, #common
  '/published/$project' => \&published,
  '/published/$project/$repository' => \&published,
  '/published/$project/$repository/$arch:filename view:?' => \&published,
  '/published/$project/$repository/$arch:filename/$filename view:?' => \&published,

  # scheduler calls
  '/getprojpack $project* $repository* $package* $arch? withrepos:bool? withsrcmd5:bool? withdeps:bool? withconfig:bool? expandedrepos:bool? ignoredisable:bool? nopackages:bool? withremotemap:bool?' => \&getprojpack, #bsdb only, but looks like marginal usage only
  'POST:/relsync $project $repository $arch' => \&postrelsync, #common, but not sure if RPC doesn't access local repo
  '/relsync $project $repository $arch' => \&getrelsync, #common, but not sure if RPC doesn't access local repo

  # worker calls
  '/getsources $project $package $srcmd5:md5' => \&getsources, #bsdb only
  '/getconfig $project $repository path:prp*' => \&getconfig, #common, but some subroutine are unsure

  '/getsignkey $project withpubkey:bool?' => \&getsignkey, #common
  '/getbinaries $project $repository $arch binaries: nometa:bool?' => \&worker_getbinaries, #common
  '/lastevents $filter:* start:num?' => \&worker_lastevents, #common
  '/event type: project: package:? repository:? arch:? job:?' => \&newevent, #common
  # tmp until lightty gets fixed
  '/public/lastevents $filter:* start:num?' => \&worker_lastevents, #before

  # search interface
  '/search $in: $match: return:? values:bool?' => \&search, #common
  '/search/project $match:' => \&search_proj, #common
  '/search/project/id $match:' => \&search_proj_id, #common
  '/search/package $match:' => \&search_pack, #common
  '/search/package/id $match:' => \&search_pack_id, #common

  'POST:/search/published cmd:' => \&search_published_updatedb, #common, but i'm not sure about BSDB:: calls
  '/search/published/binary/id $match:' => \&search_published_binary_id, #common, but i'm not sure about BSDB:: calls and some DB-stored paths
  '/search/published/pattern/id $match:' => \&search_published_pattern_id, #common, but i'm not sure about BSDB:: calls and some DB-stored paths

  # build calls for binary files
  '/build' => \&getprojectlist, #common, before
  '/build/_workerstatus scheduleronly:bool? arch*' => \&getworkerstatus, #common
  'POST:/build/$project cmd: repository* arch* package* code:*' => \&docommand, #common
  '/build/$project' => \&getrepositorylist, #common
  '/build/$project/_result oldstate:md5? view:resultview* lastbuild:bool? repository* arch* package* code:*' => \&getresult, #common, but not sure if RPC doesn't access local repo
  '/build/$project/$repository' => \&getarchlist,
  '/build/$project/$repository/_buildconfig path:prp*' => \&getconfig, #common
  '/build/$project/$repository/$arch' => \&getpackagelist, #common, before
  '/build/$project/$repository/$arch/_builddepinfo package*' => \&getbuilddepinfo, #common, but not sure if RPC doesn't access local repo
  '/build/$project/$repository/$arch/_jobhistory package* code:*' => \&getjobhistory, #common, but not sure if RPC doesn't access local repo
  'POST:/build/$project/$repository/$arch/_repository match:' =>  \&postrepo, #common, but not sure if RPC doesn't access local repo
  '/build/$project/$repository/$arch/$package_repository view:? binary:filename*' => \&getbinarylist, #common, but not sure if RPC doesn't access local repo
  'POST:/build/$project/$repository/$arch/$package_repository/_buildinfo add:*' => \&getbuildinfo_post, #common, but not sure if RPC doesn't access local repo
  '/build/$project/$repository/$arch/$package/_buildinfo add:* internal:bool?' => \&getbuildinfo, #common, but not sure if RPC doesn't access local repo
  '/build/$project/$repository/$arch/$package/_log nostream:bool? start:num? end:num?' => \&getlogfile, #bsdb only, but maybe only marginaly
  '/build/$project/$repository/$arch/$package/_reason' => \&getbuildreason, #common, but not sure if RPC doesn't access local repo
  '/build/$project/$repository/$arch/$package/_status' => \&getbuildstatus, #common, but not sure if RPC doesn't access local repo
  '/build/$project/$repository/$arch/$package/_history' => \&getbuildhistory, #common, but not sure if RPC doesn't access local repo
  '/build/$project/$repository/$arch/$package_repository/$filename' => \&getbinary, #common, but not sure if RPC doesn't access local repo
  'PUT:/build/$project/$repository/$arch/_repository/$filename ignoreolder:bool? wipe:bool?' => \&putbinary, #common, but not sure if RPC doesn't access local repo

  'POST:/request cmd: user:?' => \&createrequest, #bsdb only, but it is used only with links involved
  '/request' => \&getrequestlist, #common
  'POST:/request/$id:num cmd: newstate:? user:? comment:?' => \&postrequest, #common
  '/request/$id:num' => \&getrequest, #common
  'PUT:/request/$id:num user:?' => \&putrequest, #common
  'DELETE:/request/$id:num' => \&delrequest, #common
  '/search/request $match:' => \&search_request, #common, but i'm not sure about BSDB:: calls

  '/ajaxstatus' => \&getajaxstatus, #common
];

####################################################################

my $dispatches_ajax = [
  '/' => \&hello,
  '/ajaxstatus' => \&getajaxstatus,
  '/build/$project/_result oldstate:md5? view:resultview* repository* arch* package* code:*' => \&getresult,
  '/build/$project/$repository/$arch/$package/_log nostream:bool? start:num? end:num?' => \&getlogfile,
  '/build/$project/$repository/$arch/$package_repository view:? binary:filename*' => \&getbinarylist,
  '/getbinaries $project $repository $arch binaries: nometa:bool? raw:bool?' => \&worker_getbinaries,
  '/lastevents $filter:* start:num?' => \&worker_lastevents,
];

####################################################################

my $conf = {
  'port' => $port,
  'dispatches' => $dispatches,
  'setkeepalive' => 1,
  'maxchild' => 20,
};

my $aconf = {
  'socketpath' => $ajaxsocket,
  'dispatches' => $dispatches_ajax,
  'getrequest_timeout' => 10,
  'replrequest_timeout' => 10,
  'getrequest_recvfd' => \&BSHandoff::receive,
  'setkeepalive' => 1,
};

BSHermes::notify("SRCSRV_START", $conf);

BSStdServer::server('bs_srcserver', \@ARGV, $conf, $aconf);

