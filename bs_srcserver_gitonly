#!/usr/bin/perl -w

package bs_srcserver_gitonly;

use strict;

my $GIT_HASH_LENGTH = 40 ;
my $gittempdir = "$srcrep/:temp" ;


##############

# pridat do BSServer tuto fciu hned za reply_cpio

sub reply_cpio_data {
  my ($data, @args) = @_;
  reply(undef, 'Content-Type: application/x-cpio', 'Transfer-Encoding: chunked', @args);
  BSHTTP::swrite(\*CLNT, $data);
  BSHTTP::swrite(\*CLNT, "0\r\n\r\n");
}

##########

use File::Temp qw/ tempdir /;

sub getsources {
  my ($cgi, $projid, $packid, $srchash) = @_;
  my $dir = tempdir();
  if (system("git --git-dir=\"$srcrep/$projid/$packid/\" archive $srchash | tar -C $dir -xf -")) return undef;
  my $data = `cd $dir ; ls | cpio -ov`
  BSServer::reply_cpio_data($data);
  rmtree($dir);
  return undef;
}

##########

# lists all files from given package and revision identified by git commit hash
# TODO there are still some cases that will generate MD5s, not hashes...

sub lsrep {
  my ($projid, $packid, $srchash) = @_;
  die("no such revision\n") unless defined $srchash;
  local *F;
  die("bad packid\n") if $packid =~ /\// || $packid =~ /^\./;

  # TODO: check what exactly means these special cases, i've just changed the variable name...
  if ($srchash eq 'upload') {
    open(F, '<', "$projectsdir/$projid.pkg/$packid.upload-MD5SUMS") || die("$packid/$srchash-$packid: not in repository\n");
  } elsif ($srcmd5 eq 'pattern') {
    open(F, '<', "$projectsdir/$projid.pkg/pattern-MD5SUMS") || return {};
    # TODO: this is awful... and what to do with empty md5 in git version?
  } elsif ($srchash eq 'empty' || $srchash eq 'd41d8cd98f00b204e9800998ecf8427e') { 
    return {};
  } else {
    # this reads the file information from git
    if ($srchash !~ /^[0-9a-f]{$GIT_HASH_LENGTH}$/) {
      die("bad srchash '$srchash'\n");
    }

    my @gitfiles = `git --git-dir=\"$srcrep/$projid/$packid/\" ls-tree $srchash | cut -d' ' -f 3`;
    if ($? != 0 ) {
      die("$packid/$srchash-$packid: not in repository\n");
    }

    chomp @gitfiles;

    return {map {substr($_, $GIT_HASH_LENGTH + 1) => substr($_, 0, $GIT_HASH_LENGTH)} @gitfiles};
  }
  my @files = <F>;
  close F;
  chomp @files;
  return {map {substr($_, 34) => substr($_, 0, 32)} @files};
}


# creates *-MD5SUMS files. In git backend only for special cases not in source repository
# for these cases returns srcmd5, for normal sources an empty string, since hashes are needed
# at commit only
sub addmeta {
  my ($projid, $packid, $files, $rev) = @_;

  # calculate new meta sum
  my $meta = '';
  $meta .= "$files->{$_}  $_\n" for sort keys %$files;
  my $srcmd5 = Digest::MD5::md5_hex($meta);
  if ($rev && $rev eq 'upload') {
    mkdir_p("$srcrep/:upload");
    mkdir_p("$projectsdir/$projid.pkg");
    writestr("$srcrep/:upload/$$", "$projectsdir/$projid.pkg/$packid.upload-MD5SUMS", $meta);
  } elsif ($rev && $rev eq 'pattern') {
    if ($meta ne '') {
      mkdir_p("$srcrep/:upload");
      mkdir_p("$projectsdir/$projid.pkg");
      writestr("$srcrep/:upload/$$", "$projectsdir/$projid.pkg/pattern-MD5SUMS", $meta);
    } else {
      unlink("$projectsdir/$projid.pkg/pattern-MD5SUMS");
    }
  } else {
    # normal packages don't need this function
    return "";
  }

  return $srcmd5;
}

sub putinsrcrep {
  my ($projid, $packid, $tmpfile, $filename) = @_;

  $githash = `git --git-dir="$srcrep/$projid/$packid/" hash-object -w $tmpfile`;
  if ($? != 0 ) {
    die("git hash-object failed");
  }

  unlink($tmpfile);

  return $githash;
}

# Commits files previously prepared into repository
# files param is a reference to hash of form { filename => hash }
sub commitfiles {
  my ($cgi, $projid, $packid, $files) = @_;

  for my $filename (keys %$files) {
    if ( system( "git --git-dir=\"$srcrep/$projid/$packid/\" update-index --cacheinfo 0644 $files->{$filename} $filename" ) != 0 ) {
      die("failed git update-index");
    }
  }

  if ( system( "git --git-dir=\"$srcrep/$projid/$packid/\" commit" ) != 0 ) {
    die("git commit failed");
  }

  $githash = `git --git-dir="$srcrep/$projid/$packid/" log | head -n 1 | cut -f 2 -d ' '`;

  return $githash unless ($? != 0);
  die( "cannot get git hash" );
}

# saves the file from project and package with specified hash into some temporary location
# returns the filename
sub fetchgitfile {
  my ($projid, $packid, $githash) = @_;

  mkdir_p("$gittempdir");
  $tmpfilename = "$gittempdir/$githash-$$";

  if ( system( "git --git-dir=\"$srcrep/$projid/$packid/\" cat-file -p $githash > $tmpfilename" ) != 0 ) {
    die("git cat-file failed");
  }

  return $tmpfilename;
}

# TODO: this needs review
sub addrev {
  my ($projid, $packid, $files, $user, $comment, $target) = @_;
  die("project '$projid' does not exist\n") unless -e "$projectsdir/$projid.xml";
  if ($packid eq '_pattern') {
    my $srcmd5 = addmeta($projid, $packid, $files, 'pattern');
    bs_srcserver_common::notify_repservers('project', $projid);

    return {'rev' => 'pattern', 'srcmd5' => $srcmd5};
  }
  die("package '$packid' is read-only\n") if $packid =~ /^_product:/;
  die("package '$packid' does not exist\n") unless -e "$projectsdir/$projid.pkg/$packid.xml";
  if ($target && $target eq 'upload') {
    my $srcmd5 = addmeta($projid, $packid, $files, 'upload');
    my $filename = (keys %$files)[0];
    BSHermes::notify("SRCSRV_UPLOAD", {project => $projid, package => $packid, filename => $filename, user => $user});
    return {'rev' => 'upload', 'srcmd5' => $srcmd5};
  } elsif ($target && $target eq 'repository') {
    # repository only upload.
    return {'rev' => 'repository'};
  } elsif (defined($target)) {
    # internal version only upload.
    # TODO: obs-git: this might be a problem - addmeta probably returns '' here...
    my $srcmd5 = addmeta($projid, $packid, $files);
    return {'rev' => $srcmd5, 'srcmd5' => $srcmd5};
  }
  die("bad projid\n") if $projid =~ /\// || $projid =~ /^\./;
  die("bad packid\n") if $packid =~ /\// || $packid =~ /^\./;
  die("bad files\n") if grep {/\//} keys %$files;
  die("bad files\n") if grep {!/^[0-9a-f]{32}$/} values %$files;

  # TODO: obs-git: handle this correctly
  if ($packid eq '_product') {
    expandproduct($projid, $packid, $files, $user) || die("product conversation failed\n");
  }

  # get version/release from rpm spec/deb dsc/kiwi xml file
  my $version = 'unknown';
  my $release;
  my $bconf = Build::read_config('noarch');
  for my $type ('spec', 'dsc', 'kiwi') {
    my $file = bs_srcserver_common_notsure::findfile($projid, $packid, undef, $type, $files);
    next unless defined $file;
    my $tmpgitfile = fetchgitfile($projid, $packid, $files->{$file});
    my $d = Build::parse($bconf, $tmpgitfile );
    unlink($tmpgitfile);
    next unless defined $d->{'version'};
    $version = $d->{'version'};
    $release = $d->{'release'} if defined $d->{'release'};
    last;
  }
  if (defined($release)) {
    if ($release =~ /(\d+)\.<B_CNT>/) {
      $release = $1;
    } elsif ($release =~ /<RELEASE(\d+)>/) {
      $release = $1;
    } elsif ($release =~ /^(\d+)/) {
      $release = $1;
    } else {
      $release = '0';
    }
  }
  $release ||= '0';
  #my $srcmd5 = addmeta($projid, $packid, $files);
  # TODO: maybe can be impemented inside addmeta, but better solution would be outside
  my $githash = commitfiles($projid, $packid, $files);
  my $rev = {'srcmd5' => $githash, 'time' => time(), 'user' => $user, 'comment' => $comment, 'version' => $version, 'vrev' => $release};

  # TODO: these 'srcmd5' strings are names in files - they could be renamed, but it would have to be in whole system
  my $rev_old = BSFileDB::fdb_getlast("$projectsdir/$projid.pkg/$packid.rev", $srcrevlay);
  $rev_old ||= {'srcmd5' => 'empty'};
  my $files_old = lsrep($projid, $packid, $rev_old->{'srcmd5'});
  my $filestr = BSHermes::generate_commit_flist($files_old, $files);

  $rev = BSFileDB::fdb_add_i2("$projectsdir/$projid.pkg/$packid.rev", $srcrevlay, $rev, 'vrev', 'version', $version);
  BSHermes::notify("SRCSRV_COMMIT", {project => $projid, package => $packid, files => $filestr, rev => $rev->{'rev'}, user => $user, comment => $comment});

  # kill upload revision as we did a real commit
  unlink("$projectsdir/$projid.pkg/$packid.upload-MD5SUMS");

  bs_srcserver_common::notify_repservers('package', $projid, $packid);
  return $rev;
}

sub getfile {
  my ($cgi, $projid, $packid, $filename) = @_;
  die("no filename\n") unless defined($filename) && $filename ne '';
  die("bad filename\n") if $filename =~ /\// || $filename =~ /^\./;
  # TODO: check use of getrev function
  my $rev = bs_srcserver_common_notsure::getrev($projid, $packid, defined($cgi->{'rev'}) ? $cgi->{'rev'} : 'upload');
  die("$filename: no such project/package\n") unless $rev;
  # TODO: check that srcmd5 field - since it is also name of som file structure, it will hav to stay there with this bad name
  my $files = lsrep($projid, $packid, $rev->{'srcmd5'});
  die("$filename: no such file\n") unless $files->{$filename};

  my $tmpgitfile = fetchgitfile($projid, $packid, $files->{$filename});
  my @s = stat($tmpgitfilename);
  die("temporary git file for: $srcrep/$packid/$files->{$filename}-$filename: $!\n") unless @s;
  BSServer::reply_file($tmpgitfilename, "Content-Length: $s[7]");
  unlink($tmpgitfilename);
  return undef;
}

sub putfile {
  my ($cgi, $projid, $packid, $filename) = @_;
  die("no filename\n") unless defined($filename) && $filename ne '';
  die("bad filename\n") if $filename =~ /\// || $filename =~ /^\./;
  my $rev = bs_srcserver_common_notsure::getrev($projid, $packid, defined($cgi->{'rev'}) ? $cgi->{'rev'} : 'upload');
  die("unknown project/package\n") unless $rev;
  mkdir_p("$gittempdir");
  my $uploaded = BSServer::read_file("$gittempdir/$$");
  die("upload failed\n") unless $uploaded;

  # puts objects into repository and deletes temporary file
  my $githash = putinsrcrep($projid, $packid, "$gittempdir/$$",$filename);

  # TODO: again, srcmd5 name...
  my $files = lsrep($projid, $packid, $rev->{'srcmd5'});
  $files->{$filename} = $githash;
  # TODO: toto asi zmazat: 
  #$files = bs_srcserver_bsdbonly_links::keeplink($cgi, $projid, $packid, $files) if $cgi->{'bs_srcserver_bsdbonly_links::keeplink'};
  my $user = defined($cgi->{'user'}) ? $cgi->{'user'} : 'unknown';
  my $comment = defined($cgi->{'comment'}) ? $cgi->{'comment'} : '';
  $rev = addrev($projid, $packid, $files, $user, $comment, $cgi->{'rev'});
  return ($rev, $BSXML::revision);
}

sub delfile {
  my ($cgi, $projid, $packid, $filename) = @_;
  die("no filename\n") unless defined($filename) && $filename ne '';
  die("bad filename\n") if $filename =~ /\// || $filename =~ /^\./;
  my $rev = bs_srcserver_common_notsure::getrev($projid, $packid, defined($cgi->{'rev'}) ? $cgi->{'rev'} : 'upload');
  die("unknown project/package\n") unless $rev;
  # TODO: that srcmd5 name again..
  my $files = lsrep($projid, $packid, $rev->{'srcmd5'});
  die("file '$filename' does not exist\n") unless $files->{$filename};

  if ( system( "git --git-dir=\"$srcrep/$projid/$packid/\" rm $filename" ) != 0 ) {
    die("git rm failed");
  }

  # TODO: toto asi zmazat: 
  #$files = bs_srcserver_bsdbonly_links::keeplink($projid, $packid, $files) if $cgi->{'bs_srcserver_bsdbonly_links::keeplink'};
  my $user = defined($cgi->{'user'}) ? $cgi->{'user'} : 'unknown';
  my $comment = defined($cgi->{'comment'}) ? $cgi->{'comment'} : '';
  $rev = addrev($projid, $packid, $files, $user, $comment, $cgi->{'rev'});
  return ($rev, $BSXML::revision);
}

# TODO: gitobjecthashed is not coded - and it may not be possible?
sub sourcecommitfilelist {
  my ($cgi, $projid, $packid) = @_;
  mkdir_p("$gittempdir");
  my $uploaded = BSServer::read_file("$gittempdir/$$");
  die("upload failed\n") unless $uploaded;
  my $fl = readxml("$gittempdir/$$", $BSXML::dir);
  unlink("$gittempdir/$$");
  # make sure we know every file
  my @missing;
  my $files = {};
  for my $entry (@{$fl->{'entry'} || []}) {
    BSVerify::verify_filename($entry->{'name'});
    #BSVerify::verify_md5($entry->{'md5'});
    # TODO: maybe something like verify_sha1 !
    # TODO: 
    if (! gitobjecthashed($projid, $packid, entry->{'md5'})) {
      push @missing, $entry;
    } else {
      die("duplicate file: $entry->{'name'}\n") if exists $files->{$entry->{'name'}};
      $files->{$entry->{'name'}} = $entry->{'md5'};
    }
  }
  if (@missing) {
    my $res = {'name' => $packid, 'error' => 'missing', 'entry' => \@missing};
    return ($res, $BSXML::dir);
  }

  # TODO: toto asi zmazat?
  #$files = bs_srcserver_bsdbonly_links::keeplink($cgi, $projid, $packid, $files) if $cgi->{'bs_srcserver_bsdbonly_links::keeplink'};
  my $user = defined($cgi->{'user'}) ? $cgi->{'user'} : 'unknown';
  my $comment = defined($cgi->{'comment'}) ? $cgi->{'comment'} : '';
  if (-e "$projectsdir/$projid.pkg/$packid.upload-MD5SUMS") {
    # autocommit old update revision so that it doesn't get lost
    # TODO: here may be a problem with addrev...
    my $uploadfiles = lsrep($projid, $packid, 'upload');
    addrev($projid, $packid, $uploadfiles, $user, 'autocommit');
  }
  my $rev = addrev($projid, $packid, $files, $user, $comment);

  $cgi->{'rev'} = $rev->{'rev'};
  return getfilelist($cgi, $projid, $packid);
}

sub gitobjecthashed($projid, $packid, $githash)
{
	return system("git --git-dir=\"$srcrep/$projid/$packid/\" rev-list --all --objects | grep -q \"$packid\"");
}
